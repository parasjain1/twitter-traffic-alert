version: '2'

services:
  spark:
    image: parasjain1996/twitter_spark
    user: root
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - '8080:8080'
      - '7077:7077'
    command: /opt/bitnami/scripts/spark/run.sh
  spark-worker-1:
    image: parasjain1996/twitter_spark
    user: root
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1g
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
#      - SPARK_DAEMON_MEMORY=1g
    command: /opt/bitnami/scripts/spark/run.sh
    ports:
      - '8081:8081'
  zookeeper:
    image: 'docker.io/bitnami/zookeeper:3-debian-10'
    ports:
      - '2181:2181'
    volumes:
      - 'zookeeper_data:/bitnami'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: 'docker.io/bitnami/kafka:2-debian-10'
    ports:
      - '9092:9092'
      - '9093:9093'
    volumes:
      - 'kafka_data:/bitnami'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://kafka:9093
      - KAFKA_CFG_MESSAGE_MAX_BYTES=4000000
      - KAFKA_CFG_MAX_REQUEST_SIZE=262144000
      - KAFKA_CFG_BATCH_SIZE=262144000
      - KAFKA_CFG_FETCH_MAX_BYTES=262144000
      - KAFKA_CFG_REPLICA_FETCH_MAX_BYTES=262144000
      - KAFKA_CFG_COMPRESSION_TYPE=gzip
      - KAFKA_CFG_MAX_PARTITION_FETCH_BYTES=262144000
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_HEAP_OPTS=-Xmx3G -Xms2G
    depends_on:
      - zookeeper
  consumer:
    command: 'python /app/spark_consumer.py'
    image: 'parasjain1996/twitter_consumer'
    depends_on:
      - kafka
  producer:
    command: 'python /app/kafka_producer.py'
    image: 'parasjain1996/twitter_producer'
    depends_on:
      - kafka

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local